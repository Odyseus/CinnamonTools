.\" Man page generated from reStructuredText.
.
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.TH "APP.PY" "1" "Mar 13, 2022" "" "Cinnamon Tools"
.SH NAME
app.py \- CLI utility to build xlets/themes and to perform development tasks on Cinnamon Tools' repository.
.SH HINT
.sp
This Python application can generate a system executable with Bash completions support. See \fBapp.py generate\fP\&.
.SH SYNOPSIS
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C

app.py (\-h | \-\-help | \-\-version | \-\-manual | \-r | \-\-restart\-cinnamon)
app.py menu
app.py build_xlets [\-x <name>... | \-\-xlet\-name=<name>...]
                   [\-d <domain> | \-\-domain=<domain>]
                   [\-o <dir> | \-\-output=<dir>]
                   [\-e <dir> | \-\-extra\-files=<dir>]
                   [\-i | \-\-install\-localizations]
                   [\-n | \-\-no\-confirmation]
                   [\-r | \-\-restart\-cinnamon]
app.py build_themes [\-t <name> | \-\-theme\-name=<name>]
                    [\-v <name>... | \-\-variant\-name=<name>...]
                    [\-o <dir> | \-\-output=<dir>]
                    [\-n | \-\-no\-confirmation]
                    [\-r | \-\-restart\-cinnamon]
app.py dev_xlets <sub_commands>...
                 [\-x <name>... | \-\-xlet\-name=<name>...]
app.py dev_themes <sub_commands>...
                  [\-s <exec> | \-\-sass\-parser=<exec>]
                  [\-v <name>... | \-\-variant\-name=<name>...]
app.py generate (system_executable | docs | docs_no_api | base_xlet |
                repo_changelog | themes_changelog | all_changelogs)
                [\-f | \-\-force\-clean\-build]
                [\-u | \-\-update\-inventories]
app.py print_xlets_slugs
app.py print_theme_variants
app.py repo (submodules | subtrees) (init | update)

.ft P
.fi
.UNINDENT
.UNINDENT
.SH REQUIREMENTS
.SS Xlets/Themes building requirements
.sp
No mayor requirements are needed to build xlets/themes other than Python 3.7+. End users can simply perform the following steps:
.INDENT 0.0
.IP 1. 3
Download the source code from CinnamonTools\(aq repository or from any of its mirrors and unpack it.
.IP 2. 3
Open a terminal from inside the extracted source code and run the command \fB\&./app.py menu\fP\&.
.IP 3. 3
The CLI menu is completely interactive, just follow instructions.
.UNINDENT
.SS Development tasks requirements
.sp
Almost all development tasks require the Cinnamon Tools\(aq repository to be \fIdeep cloned\fP to checkout all the needed sub\-modules.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
git clone \-\-recurse\-submodules \-\-shallow\-submodules <cinnamon_tools_repository_url>
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP \(bu 2
\fB\-\-recurse\-submodules\fP argument will also clone the sub\-modules and all sub\-modules that a sub\-module might have.
.IP \(bu 2
\fB\-\-shallow\-submodules\fP argument is to clone the sub\-modules to a depth of one commit to avoid downloading a huge amount of \fBgit\fP history.
.UNINDENT
.SS Documentation building requirements
.INDENT 0.0
.IP \(bu 2
\fBPython 3.7+\fP
.IP \(bu 2
\fBsphinx>=1.8.1\fP: install from your distribution repositories.
.UNINDENT
.sp
\fBNote:\fP Deep cloning required.
.SS Gtk 3 and Cinnamon themes building from Sass sources
.INDENT 0.0
.IP \(bu 2
\fBPython 3.7+\fP
.IP \(bu 2
\fBDart Sass\fP: \fI\%Download the appropiate release\fP <\fBhttps://github.com/sass/dart-sass/releases\fP> and \fI\%see installation instructions\fP <\fBhttps://github.com/sass/dart-sass#standalone\fP>\&.
.UNINDENT
.SS Gtk and Cinnamon themes thumbnails generation
.INDENT 0.0
.IP \(bu 2
\fBImageMagic\fP: Install from your distribution repositories.
.UNINDENT
.SS Xlets help pages building optional requirement
.INDENT 0.0
.IP \(bu 2
\fBpyuca\fP: install from your distribution repositories.
.UNINDENT
.SS Python virtual environment
.sp
A Python virtual environment can be created inside the \fB\&.venv\fP folder at the root of the repository. The \fB\&.venv\fP folder is already ignored in the repository\(aqs \fB\&.gitignore\fP file. The virtual environment is recommended, but not required since I designed the main Python application \fBto work with all Python 3 versions in existence\fP (or NONE AT ALL).
.SH DETAILED USAGE
.SS General app.py options
.INDENT 0.0
.IP \(bu 2
\fB\-h\fP or \fB\-\-help\fP: Display basic command line usage.
.IP \(bu 2
\fB\-\-manual\fP: Display the application manual page.
.IP \(bu 2
\fB\-r\fP or \fB\-\-restart\-cinnamon\fP: Restart Cinnamon\(aqs shell.
.UNINDENT
.SS app.py menu
.sp
This command starts a CLI menu from which xlets and themes can be built interactively.
.SS app.py build_xlets
.sp
This command is used to build all or specific xlets. All xlets found in Cinnamon Tools\(aq repository aren\(aqt directly usable, they need to be \fIbuilt\fP\&. \fIBuilding\fP an xlet just means that the \fIraw xlet\fP (as found in the repository) will be copied into another location (chosen when performing the building) and a string substitution will be done that will apply a generated UUID (\fBxlet_name@custom_domain_name\fP) to all files (files content and file names). It will also compile the \fBgsettings\fP files (if an xlet contains such files) and copy files common to all xlets (LICENSE.md, localizations installer script, global modules, etc.).
.SS Options
.INDENT 0.0
.IP \(bu 2
\fB\-x <name>\fP or \fB\-\-xlet\-name=<name>\fP: Specify one or more xlets to build.
.INDENT 2.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
Example usage: \fBapp.py build_xlets \-x 0ArgosForCinnamon \-x 0CinnamonTweaks\fP
.IP \(bu 2
This command will build the Argos for Cinnamon applet and the Cinnamon Tweaks extension into the default output directory.
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP \(bu 2
\fB\-d <domain>\fP or \fB\-\-domain=<domain>\fP: To be able to build any xlet, it is necessary to specify a domain name. This domain name is then used to generate an xlet UUID (and other data). To avoid passing this command line option every time one builds xlets, a file named \fBdomain_name\fP can be created inside a folder named \fBtmp\fP at the root of the repository whose only content should be the desired domain name. This command line option has precedence over the \fBdomain_name\fP file.
.INDENT 2.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
Example usage: \fBapp.py build_xlets \-x 0ArgosForCinnamon \-d example.com\fP
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP \(bu 2
\fB\-o <dir>\fP or \fB\-\-output=<dir>\fP: The output directory that will be used to save the built xlets. If not specified, the default storage location will be used.
.INDENT 2.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
Example usage: \fBapp.py build_xlets \-x 0ArgosForCinnamon \-o /home/user_name/.local/share/cinnamon\fP
.IP \(bu 2
This command will build the Argos for Cinnamon applet directly into Cinnamon\(aqs install location for xlets.
.UNINDENT
.UNINDENT
.UNINDENT
.IP \(bu 2
\fB\-e <dir>\fP or \fB\-\-extra\-files=<dir>\fP: Path to a folder containing files that will be copied into an xlet folder at build time.
.INDENT 2.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
Example usage: \fBapp.py build_xlets \-x 0ArgosForCinnamon \-\-extra\-files=~/MyCinnamonToolsExtraFiles\fP
.IP \(bu 2
The folder passed to this option should have the same folder structure as the Cinnamon Tools repository.
.IP \(bu 2
Only two folders should exist inside this folder; one called \fBapplets\fP and/or another called \fBextensions\fP\&. Any other content will be ignored.
.IP \(bu 2
Using the example at the beginning of this list, to add extra files to the built \fBArgosForCinnamon\fP xlet, those extra files should reside at \fB~/MyCinnamonToolsExtraFiles/applets/ArgosForCinnamon\fP\&.
.IP \(bu 2
Copied files that exist at the destination will be overwritten without confirmation.
.IP \(bu 2
Core xlet files cannot be copied/overwritten. More precisely, files ending with the following file extensions will be ignored: \fB\&.js\fP, \fB\&.py\fP, \fB\&.xml\fP, \fB\&.pot\fP, and \fB\&.json\fP\&.
.UNINDENT
.UNINDENT
.UNINDENT
.IP \(bu 2
\fB\-i\fP or \fB\-\-install\-localizations\fP: Install xlets localizations after building xlets.
.INDENT 2.0
.INDENT 3.5
.UNINDENT
.UNINDENT
.IP \(bu 2
\fB\-n\fP or \fB\-\-no\-confirmation\fP: Do not confirm the deletion of an already built xlet when the \fB\-\-output\fP option is used.
.IP \(bu 2
\fB\-r\fP or \fB\-\-restart\-cinnamon\fP: Restart Cinnamon\(aqs shell after finishing the xlets building process.
.UNINDENT
.SS app.py build_themes
.sp
This command is used to build all the themes. Just like xlets, the themes found in Cinnamon Tools\(aq repository aren\(aqt directly usable, they need to be \fIbuilt\fP\&. The themes building process is interactive. The build process will ask for Cinnamon version, GTK+ 3/4 versions, theme name, etc.
.SS Options
.INDENT 0.0
.IP \(bu 2
\fB\-t <name>\fP or \fB\-\-theme\-name=<name>\fP: To be able to build the themes, it is necessary to specify a theme name. This theme name is then used to generate the full theme name (theme_name\-theme_variant). To avoid passing this command line option every time one builds themes, a file named \fBtheme_name\fP can be created inside a folder named \fBtmp\fP at the root of the repository whose only content should be the desired theme name. This command line option has precedence over the \fBtheme_name\fP file.
.IP \(bu 2
\fB\-v <name>\fP or \fB\-\-variant\-name=<name>\fP: Specify a theme variant name (the name of its folder). If not specified, all theme variants will be built.
.IP \(bu 2
\fB\-o <dir>\fP or \fB\-\-output=<dir>\fP: The output directory that will be used to save the built themes. If not specified, the default storage location will be used. See \fI\%build command \-\-output\fP option notes for more details.
.IP \(bu 2
\fB\-n\fP or \fB\-\-no\-confirmation\fP: Do not confirm the deletion of an already built theme when the \fB\-\-output\fP option is used. See \fI\%build command \-\-output\fP option notes for more details.
.IP \(bu 2
\fB\-r\fP or \fB\-\-restart\-cinnamon\fP: Restart Cinnamon\(aqs shell after finishing the themes building process.
.UNINDENT
.SS app.py dev_themes
.SS Options
.INDENT 0.0
.IP \(bu 2
\fB\-v <name>\fP or \fB\-\-variant\-name=<name>\fP: Specify a theme variant name (the name of its folder). If not specified, all theme variants will be worked on.
.UNINDENT
.SS Sub\-commands
.INDENT 0.0
.IP \(bu 2
\fBgenerate_gtk_sass_includes_index\fP: The Sass source for the Gtk 3/4 themes is organized by several Sass files. Instead of dealing with dozens of import \fB@import\fP statements every time that I add or remove a file, I only import one index file (\fBthemes/_sass/gtk/includes/__index__.scss\fP) that is automatically generated by this command.
.IP \(bu 2
\fBgenerate_thumbnails\fP: This command generates the thumbnails for the Gtk and Cinnamon themes (the ones seen in Cinnamon\(aq theme selector window). The generated thumbnail is just an image with the variant accent color as its background. See requirements\&.
.IP \(bu 2
\fBparse_sass\fP: This command parses the Sass files needed to create the themes found in this repository. It\(aqs only useful for people that wants to create their own themes variants. See requirements\&.
.UNINDENT
.SS app.py dev_xlets
.sp
This command is used to perform development tasks.
.SS Options
.INDENT 0.0
.IP \(bu 2
\fB\-x <name>\fP or \fB\-\-xlet\-name=<name>\fP: Specify one or more xlets to perform development tasks on. Without specifying any xlet, all xlets will be handled.
.UNINDENT
.SS Sub\-commands
.INDENT 0.0
.IP \(bu 2
\fBgenerate_meta_file\fP: Generates a unified metadata file with the content of the metadata.json file from all xlets. It also contains extra data for all xlets to facilitate their development.
.IP \(bu 2
\fBcreate_localized_help\fP: Generates the localized \fBHELP.html\fP file for all xlets. This file is a standalone HTML file that contains detailed a description and usage instructions for each xlet. It also contains their change logs and list of contributors/mentions.
.IP \(bu 2
\fBgenerate_trans_stats\fP: Generates a simple table with information about missing translated strings inside the PO files.
.IP \(bu 2
\fBupdate_pot_files\fP: It re\-generates all xlets\(aq POT files to reflect the changes made to the translatable strings on them.
.IP \(bu 2
\fBupdate_spanish_localizations\fP: It updates the \fBes.po\fP files from all xlets from their respective POT files.
.IP \(bu 2
\fBcreate_changelogs\fP: Generates \fIhuman readable\fP change logs from the Git history of changes for each xlet.
.UNINDENT
.SS app.py generate
.SS Sub\-commands
.INDENT 0.0
.IP \(bu 2
\fBsystem_executable\fP: Create an executable for the \fBapp.py\fP application on the system PATH to be able to run it from anywhere.
.INDENT 2.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
The system executable creation process will ask for an executable name (the default is \fBcinnamon\-tools\-cli\fP) and the absolute path to store the executable file (the default is \fB$HOME/.local/bin\fP).
.IP \(bu 2
It will also ask for bash completions creation.
.UNINDENT
.UNINDENT
.UNINDENT
.IP \(bu 2
\fBdocs\fP: Generate this documentation page.
.IP \(bu 2
\fBdocs_no_api\fP: Generate this documentation page without extracting Python modules docstrings.
.IP \(bu 2
\fBbase_xlet\fP: Interactively generate a \fIskeleton\fP xlet.
.UNINDENT
.SS Options for \fBdocs\fP and \fBdocs_no_api\fP sub\-commands
.INDENT 0.0
.IP \(bu 2
\fB\-f\fP or \fB\-\-force\-clean\-build\fP: Clear doctree cache and destination folder when building the documentation.
.IP \(bu 2
\fB\-u\fP or \fB\-\-update\-inventories\fP: Update inventory files from their on\-line resources when building the documentation. Inventory files will be updated automatically if they don\(aqt already exist.
.UNINDENT
.SS app.py repo
.sp
Command to perform tasks in the Cinnamon Tool\(aqs Git repository. These tasks where directly integrated into this application to avoid fatal errors (a simple error could mangle the local Git repository).
.SS Sub\-commands
.INDENT 0.0
.IP \(bu 2
\fBsubmodules\fP: Manage sub\-modules.
.INDENT 2.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
\fBinit\fP: Initialize sub\-modules. Only needed if the Cinnamon Tools\(aq repository wasn\(aqt \fIdeep cloned\fP\&.
.IP \(bu 2
\fBupdate\fP: This is needed only to merge the changes done on the upstream sub\-modules.
.UNINDENT
.UNINDENT
.UNINDENT
.IP \(bu 2
\fBsubtrees\fP: Manage repositories handled by the subtree merge strategy.
.INDENT 2.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
\fBinit\fP: Setup sub\-trees added to the Cinnamon Tools\(aq repository.
.IP \(bu 2
\fBupdate\fP: This is needed only to merge the changes done on the upstream repositories added as a sub\-trees.
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SH AUTHOR
Odyseus
.SH COPYRIGHT
2016-2022, Odyseus.
.\" Generated by docutils manpage writer.
.
