
===========================================
Cinnamon's xlets settings re-implementation
===========================================

General changes
---------------

- This implementation uses header bars instead of traditional windows with a toolbar. Why?

    + Because upstream is planing to switch to this aberration belched from the bowels of corporations full of web developers playing at being software developers. SO, better get used to this garbage in preparation for when it's forced down our throats.
    + Gtk.HeaderBars are easier to deal with (just create one and throw all widgets inside it). So, there is the barely bright side. LOL
    + In spite of my aversion for header bars, this framework is used for settings windows for xlets. And I create xlets whose settings are "to be set and forgotten". So, one just has to tolerate the settings window once. And for xlet settings that need to be changed frequently, I always create a mechanism to set them on-the-fly, without having to open the settings window.

- This implementation remembers the last state of opened windows (window size and maximized state). Setting an initial size for a window that will be suitable for every single combination of font sizes, Gtk3 themes, screen resolutions just doesn't cut it for me. Last selected section (stack) is also remembered.
- This implementation doesn't use JSON files for the creation of the widgets. I wanted the power and flexibility of Python scripts.
- The ``dependency`` option can be a string of a list.

Widget changes made on this implementation
------------------------------------------

- **button**: This widget doesn't use the *proxy* that the Cinnamon implementation uses. Instead, it just toggles a boolean setting that can be bound to any action on the xlet side.
- **entry**: This widget has the ``expand-width`` option set to True by default, as it should be.
- **list**: This widget has several bug fixes (**FIXME**: remember to properly report them if and when I can reproduce them) and several improvements.

    + Added ``options-from-paths`` option. It allows to create a combo box widget based on files found inside an specified path to a folder. This option is a dictionary with three possible properties:

        * ``file-patterns``: A list of file patterns to be used by the fnmatch.filter() Python function. The names of the files that matches the patterns will be used to populate the combo box.
        * ``path-in-xlet``: A relative path to a folder inside the xlet folder that will be scanned for files using the ``file-patterns`` option. The items generated by files found in the folder specified by this option will be prefixed with a double colon (::).
        * ``path-in-setting``: The name of a setting that stores a custom path to a folder to scan for files.
        * Either the ``path-in-xlet`` option or the ``path-in-setting`` option or both can be specified, but none omitted.


    + Added ``color`` cell renderer. It allows to choose a color using a color chooser. The cell will be rendered with the selected color as its background color and the color *name* as its visible value. The color of the text will be black or white depending on the luminance of the background color.
    + Added ``move-buttons`` boolean option. It allows to show/hide the move up/down buttons on the ``list`` widget.
    + Added ``immutable`` option. An *immutable* ``list`` widget can be edited, but items in the list cannot be removed nor new ones be added.

        * This setting can be a boolean or a dictionary.
        * If a dictionary, the ``read_only_keys`` key will allow to specify a list of column IDs whose created widgets should be set as insensitive.

    + Added ability to export and import the content of the list.
    + Added ``apply_key`` and ``imp_exp_path_key`` arguments.

        * The ``apply_key`` is a generic setting that can be bound to a function on the xlet side to allow to apply the changes made to the list on demand.
        * The ``imp_exp_path_key`` key is a generic setting that is used to store the last selected path when using the import/export dialogs.

    + Added ``dialog-info-labels`` option (an array/list of strings) that allows to display informative labels on the edit/add dialog. This allows to keep the window clean and at the same time keep basic information at hand.
    + Changed ``keybinding`` cell renderer. The cell will display the exact same name displayed in the ``keybinding`` widget instead of the internal value. For example, a ``keybinding`` with its shortcut set to **Control+d** (the actual internal value is **<Primary>d**), it will display **Control+D** in the ``keybinding`` widget label **AND** in the ``keybinding`` cell renderer.
    + Implemented ``apply-and-quit`` boolean option. It allows to exit the settings window when the apply button on a ``list`` widget is clicked.
    + Added ``app`` cell renderer. It allows to use a ``appchooser`` widget to choose an application from the applications installed in a system. The value stored is the application ID and the value showed in the list is the application name.

- **keybinding**: Added ``num-bind`` integer option that exposes for configuration the number of keybindings to create for each ``keybinding`` widget.
- **keybinding-with-options**. A new widget that allows to attach a keybinding to a combo box. The objective is to be able to easily tie a keybinding to a predefined action. This widget is also exposed to be used with the ``list`` widget.
- **label**: Added ``use-markup`` boolean option that allows to use markup in labels.
- **colorchooser**: Added ability to activate the color chooser button when clicking the row is in, just like switches. Also exposed the capability for the color chooser to select color with or without alpha with the boolean option ``use-alpha``.
- **textview**: Added ``accept-tabs`` boolean option to ``textview`` widget. Setting it to **true** will allow to insert a tab character when pressing the :kbd:`Tab` key. Setting it to **false** the :kbd:`Tab` key will move the keyboard focus out of the widget.
- **combobox**: Changes:

    + Changed the ``options`` option. I inverted the definition of ``options`` when they are declared as a dictionary. In Cinnamon's implementation, the key in the dictionary is used as a label and the value is used as the value for that label. In this implementation, the value is used as a key in the dictionary and the label as the value of that key. This was done to be able to localize the labels declared in a Python script. If I would have left the Cinnamon implementation intact, I would have been forced to create a *dummy strings storage* for ``gettext`` to be able to *see them* (which would have been a chore). Additionally, in Cinnamon's implementation, one ended up using keys with spaces, which freaked me out (LOL).
    + Exposed for configuration the ``valtype`` option for this widget. This was a necessity born of the change that I made to the ``options`` option.

    .. note::

        I finally figure out why in Cinnamon's implementation the ``options`` option is implemented in an *unnatural* way. It's because when the widgets are generated from definitions found in a settings-schema.json file, the values can be defined in the type that is needed (integer, float, string or boolean). Then, when the widget is built, the type is extracted from the values themselves. Since I inverted the ``options`` option into a *natural* behavior, I broke that very clever feature, and that's why I exposed the ``valtype`` option; to be able to explicitly set a type for an option.

- **appchooser**: A new widget that allows to select an application from the list of installed applications on a system. The value stored in the setting for this widget is the application ID (the name of its .desktop file).
- **applist**: A new widget that allows to store a list of unique applications that can be selected from the list of installed applications on a system. The value stored in the setting for this widget is an array with the list of application IDs (the name of their .desktop files).
- **filechooser**: Added a button that allows to clear the path set by this widget.


Limitations of this implementation
----------------------------------

.. contextual-admonition::
    :title: No longer a limitation

    .. rst-class:: wy-text-strike

        - Settings windows aren't multi instance. When dealing with multiple instances of the same xlet, a setting window for each instance of an xlet will be opened. This was done to simplify the code and to not depend on features dependent on specific Cinnamon versions nor on third-party libraries like XApps.

TODO
----

- Implement the rest of widgets (``datechooser``, ``fontchooser``, ``scale``, ``soundfilechooser`` and ``tween``). Since I don't use them in any of my xlets, I didn't implemented these widgets just yet. **Low priority**
- Implement handling of gsettings. This will allow me to use this framework on the xlets in which I use gsettings with custom GUIs. **Ultra low priority**
- Implement a *multi-widget widget*. Something similar to the ``keybinding-with-options`` widget. But instead of binding a combo box to a key binding, I would like to bind any type of widget to an option selector widget (a combo box or a stack switcher). Very green idea yet. **Low priority**

DONE
----

.. contextual-admonition::
    :title: Implemented

    Final implementation details:

    - Use of side bars instead of stack switchers in the header bar.
    - At the start of the header bar, the instance switcher. If only one instance, the image of the xlet.
    - In the middle of the header, just the window title and the xlet UUID and instance ID as sub-title.
    - At the end of the header bar, the menu button to handle importing/exporting/reseting settings.

    .. rst-class:: wy-text-strike

        - Implement handling of multiple xlet instances. I didn't implemented this due to its complexity and because I mostly use one instance of each xlet, so it never bothered me. But now that I'm familiar enough with the original code, I might give it a try.

            + Forget about adding the window title to the header bar. If I implement this, I would have to add the instance switcher buttons at the start of the header bar, leaving no place whatsoever to display the window title.
            + Maybe add a status bar at the bottom of the window that can hold the window title along with other information; like the instance ID perhaps? Or maybe just a simple label at the top of the window and bellow the header bar? But what I like the most so far is:

                1. Add a button at the start of the header bar with the xlet icon as an image and the text "Settings for..." as a tooltip.
                2. In most cases, the image alone will serve to quickly identify to which xlet the window belongs.
                3. K.I.S.S. it. Do not add a menu nor any other action to the button.
                4. I already implemented this button without implementing multi-instance support. It was bothering me a big deal to see the title text ellipsized 90% of the time; it just made that text in that place totally useless. Like I said in point 3, in most cases the image is enough.
