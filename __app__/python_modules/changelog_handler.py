#!/usr/bin/python3
# -*- coding: utf-8 -*-
"""Changelog handler.

This module is used to generate all changelogs generated by the git log command.

Attributes
----------
CHANGELOG_TITLE : str
    The main title in a changelog file.
git_log_cmd : str
    The command to use when generating changelogs.
"""

import os
import re

git_log_cmd = 'git log --grep={xlet_slug} --pretty=format:"\
- **Date:** %aD%n\
- **Commit:** [%h](https://gitlab.com/Odyseus/CinnamonTools/commit/%h)%n\
- **Author:** %aN%n%n\`\`\`%n%b%n\`\`\`%n%n***%n" \
-- {relative_xlet_path} {append_or_override} "{tmp_log_path}"'

# - **Author:** %aN%n%n\`\`\`%n%s%n%b%n\`\`\`%n%n***%n" \

CHANGELOG_TITLE = """## {xlet_name} changelog

#### This change log is only valid for the version of the xlet hosted on [its original repository](https://gitlab.com/Odyseus/CinnamonTools)

***

"""


class ChangelogSanitizer(object):
    """Changelog sonitizer.

    Attributes
    ----------
    changelog_title : str
        The main title in a changelog file.
    source_path : str
        Temporary location of the changelog.
    target_path : str
        Final destination of the changelog.
    """

    def __init__(self, xlet_name, source_path, target_path):
        """Initialize.

        Parameters
        ----------
        xlet_name : str
            Name of the xlet.
        source_path : str
            Temporary location of the changelog.
        target_path : str
            Final destination of the changelog.
        """
        super(ChangelogSanitizer, self).__init__()
        self.source_path = source_path
        self.target_path = target_path

        self.changelog_title = CHANGELOG_TITLE.format(xlet_name=xlet_name)

    def sanitize(self):
        """Sanitize.
        """
        strings = None

        try:
            with open(self.source_path, "r") as log_file_r:
                # The split-join is to somewhat sanitize my first commit messages
                # back when I started the repository.
                # I lazily wrote hundred of commits on one line at the beginning.
                # Re-writing history isn't an option. I already did enough damage doing that. LOL
                strings = "\n- ".join(log_file_r.read().split(". - "))
                # strings = log_file_r.read()
        except Exception as error:
            print(error)
            quit()
        finally:
            # Wrap long lines to 100 characters. As long as an horizontal scrollbar
            # doesn't show up on 1024 width resolutions, I'm golden.
            if strings is not None:
                os.makedirs(os.path.dirname(self.target_path), exist_ok=True)
                wrapped_strings = ""
                # StackOverflow to the rescue!!! http://stackoverflow.com/a/16430216/4147432
                # strings = "\n".join(line.strip() for line in re.findall(r'.{1,100}(?:\s+|$)', strings))

                # I had to handle each freaking line independently because handling them
                # in bulk completely destroys absolutelly all new lines.
                for s in strings.splitlines():
                    if len(s) < 100:
                        wrapped_strings += s + "\n"
                    else:
                        wrapped_strings += "\n".join(line.strip()
                                                     for line in re.findall(r".{1,100}(?:\s+|$)", s)) + "\n"

                with open(self.target_path, "w") as log_file_w:
                    log_file_w.write(self.changelog_title + wrapped_strings)


if __name__ == "__main__":
    pass
